<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper				
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"				
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">				

<mapper namespace="kr.co.redbull.user">
	<sql id="userColumns">
			u_id, <!-- SqlSessionTemplate 설정(카멜케이스로 바꾸는) 설정때문에 uid로 바뀌고, uid는 예약어이기 때문에 null로 나옴 -->                             
		    name,                                
		    passwd,                              
		    DECODE(h_level, 1, 'BASIC', 2, 'SILVER', 3, 'GOLD', 'NOLEVEL') as hlevel,                             
		    login,                               
		    recommend,                           
		    email,                               
		    TO_CHAR(reg_dt, 'YYYY/MM/DD') as regDt
	</sql>
	
	<sql id="baseCondition">
		<where>
			<choose>
				<when test="'10' == searchDiv">
					u_id like '%' || #{searchWord} || '%'
				</when>
				<when test="'20' == searchDiv">
					name like '%' || #{searchWord} || '%'
				</when>
				<when test="'30' == searchDiv">
					email like '%' || #{searchWord} || '%'
				</when>				
			</choose>
		</where>	
	</sql>
	
	<!-- 사용자 전체 조회 -->
	<select id="get_all" resultType="User"> <!-- Alias 사용 -->
		SELECT                                   
			<include refid="userColumns"></include> 						
		FROM                                     
		    users                                
		ORDER BY regDt, u_id                    
	</select>
	
	<!-- 
		do_update: 수정
		do_delete: 삭제
		do_save: 저장
		get_selectOne: 단건조회
		get_retrieve: 목록조회
	-->
	
	<!-- 전체(목록) 조회 -->
	<select id="get_retrieve" parameterType="Search" resultType="User"> <!-- Alias 사용 -->
		SELECT T1.*, T2.*                                  
		FROM (                                             
		SELECT B.u_id,                                     
		        B.name,                                    
		        B.passwd,                                  
		        DECODE(B.h_level, 1, 'BASIC', 2, 'SILVER', 3, 'GOLD', 'NOLEVEL') as hlevel,                                 
		        B.login,                                   
		        B.recommend,                               
		        B.email,                                   
		        TO_CHAR(B.reg_dt, 'YYYY/MM/DD') regDt,    
		        B.rnum AS num                       
		FROM(                                              
		     SELECT ROWNUM AS rnum, A.*                    
		     FROM(                                         
		          SELECT *                                 
		          FROM users                               
				 <include refid="baseCondition"></include>
		          ORDER BY reg_dt DESC                     
		         )A WHERE ROWNUM <![CDATA[ <= ]]> ( #{pageSize} *( #{pageNum} - 1)+ #{pageSize} )     
		    )B WHERE B.rnum <![CDATA[ >= ]]> ( #{pageSize} *( #{pageNum} - 1)+1)            
		) T1                                               
		NATURAL JOIN (SELECT COUNT(*) totalCnt            
		              FROM users                           
					  <include refid="baseCondition"></include>
		              )T2   
	</select>
	
	
	<!-- 업데이트 -->
	<update id="do_update" parameterType="User"> <!-- Alias 사용 -->
		UPDATE users            
		SET                     
		    name       = #{name, jdbcType=VARCHAR}   
		    ,passwd    = #{passwd, jdbcType=VARCHAR}    
		    ,h_level   = #{level, jdbcType=NUMERIC}      
		    ,login     = #{login, jdbcType=NUMERIC}    
		    ,recommend = #{recommend, jdbcType=NUMERIC}   
		    ,email     = #{email, jdbcType=VARCHAR}      
		    ,reg_dt    = SYSDATE
		WHERE                   
		    u_id = #{u_id, jdbcType=VARCHAR}          
	</update>

	<!-- 단건 조회 -->
	<select id="get_selectOne" parameterType="User" resultType="User"> <!-- Alias 사용 -->
		SELECT                                   
			<include refid="userColumns"></include>                 
		FROM                                     
		    users                                
		WHERE u_id = #{u_id, jdbcType=VARCHAR}                   
	</select>
	
	<!-- 등록 -->
	<insert id="do_save" parameterType="User"> <!-- Alias 사용 -->
		INSERT INTO users (
	    u_id,          
	    name,          
	    passwd,        
	    h_level,       
	    login,         
	    recommend,     
	    email,         
	    reg_dt         
	) VALUES (         
	    #{u_id, jdbcType=VARCHAR}, <!-- 타입을 varchar로 고정 -->            
	    #{name, jdbcType=VARCHAR},             
	    #{passwd, jdbcType=VARCHAR},        
	    #{level, jdbcType=NUMERIC}, <!-- DAD의 ADD 메소드에서 레벨을 숫자로 변환해서 받으므로 -->           
	    #{login, jdbcType=NUMERIC},             
	    #{recommend, jdbcType=NUMERIC},              
	    #{email, jdbcType=VARCHAR},             
	    SYSDATE        
	)                  
	</insert>
	
	<!-- 삭제 -->
	<!-- namespace + id로 호출함 : kr.co.ehr.user.de_delete -->
	<delete id="do_delete" parameterType="User"> <!-- Alias 사용 -->
		DELETE FROM users WHERE u_id = #{u_id} <!-- VO의 멤버변수 이름을 줌 -->
	</delete>

</mapper>